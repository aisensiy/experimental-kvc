apiVersion: v1
kind: Pod
metadata:
  name: "{{.KVCName}}"
  namespace: "{{.NS}}"
{{ if eq .KVCOp "add" }}
  ownerReferences:
  - apiVersion: {{.APIVersion}}
    kind: {{.Kind}}
    name: {{.Name}}
    uid: {{.UID}}
    controller: {{.Controller}}
    blockOwnerDeletion: {{.BlockOwnerDeletion}}
{{ end }}
  labels:
{{ range $key, $val := .Labels }}
    "{{ $key }}": "{{ $val }}"
{{ end }}
    "kvcname": "{{.Name}}"
    "vcid": "{{.ID}}"
spec:
  affinity:
{{ if eq .KVCOp "delete" }}
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: {{.KVCNodeLabelKey}}
            operator: Exists
{{ end }}
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: kvcname
            operator: In
            values:
            - {{.Name}}
          - key: vcid
            operator: In
            values:
            - {{.ID}}
        topologyKey: kubernetes.io/hostname
{{ if eq .KVCOp "add" }}
  {{ if .NodeAffinity }}
    nodeAffinity:
      {{ if .NodeAffinity.RequiredDuringSchedulingIgnoredDuringExecution }}
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        {{ range $nodeSelectorTerm := .NodeAffinity.RequiredDuringSchedulingIgnoredDuringExecution.NodeSelectorTerms }}
        - matchExpressions:
          {{ range $nodeSelectorRequirement := $nodeSelectorTerm.MatchExpressions }}
          - key: {{ $nodeSelectorRequirement.Key }}
            operator: {{ $nodeSelectorRequirement.Operator }}
            values:
            {{ range $value := $nodeSelectorRequirement.Values }}
            - {{ $value }}
            {{ end }}
          {{ end }}
        {{end}}
      {{ end }}
      {{ if .NodeAffinity.PreferredDuringSchedulingIgnoredDuringExecution }}
      preferredDuringSchedulingIgnoredDuringExecution:
        {{ range $preferred := .NodeAffinity.PreferredDuringSchedulingIgnoredDuringExecution }}
        - weight: {{ $preferred.Weight }}
          preference:
            matchExpressions:
            {{ range $nodeSelectorRequirement := $preferred.Preference.MatchExpressions }}
            - key: {{ $nodeSelectorRequirement.Key }}
              operator: {{ $nodeSelectorRequirement.Operator }}
              values:
              {{ range $value := $nodeSelectorRequirement.Values }}
              - {{ $value }}
              {{ end }}
            {{ end }}
        {{ end }}
      {{ end }}
  {{ end }}
{{ if .Tolerations }}
  tolerations:
    {{ range $toleration := .Tolerations }}
    - key: {{ $toleration.Key }}
      value: {{ $toleration.Value }}
      operator: {{ $toleration.Operator }}
      effect: {{ $toleration.Effect }}
    {{ end }}
{{ end }}
{{ end }}
  volumes:
    - name: dataset-root
      hostPath:
        path: {{index .Options "dataPath"}}
{{ if eq .KVCOp "add" }}
  initContainers:
  - image: minio/mc:RELEASE.2018-02-09T23-07-36Z
    imagePullPolicy: "Always"
    command: ["/bin/sh"]
    args: ["-c", "mkdir -p $DATA_PATH"]
    name: kvc-s3-init-container
    volumeMounts:
    - mountPath: {{index .Options "dataPath"}}
      name: dataset-root
    env:
    - name: DATA_PATH
      value: {{ index .KVCOptions "path" }}
{{ end  }}
  containers:
  - image: minio/mc:RELEASE.2018-02-09T23-07-36Z
    imagePullPolicy: "Always"
    command: ["/bin/sh"]
{{ if eq .KVCOp "add" }}
    args: ["-c", "mc config host add s3 ${AWS_ENDPOINT_URL} ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} --api ${S3_VERSION}; mc cp ${RECURSIVE_OPTION} s3/${BUCKET_NAME}${BUCKET_PATH} ${DATA_PATH}"]
{{ end  }}
{{ if eq .KVCOp "delete" }}
    args: ["-c", "rm -rf ${DATA_PATH}"]
{{ end  }}
    name: kvc-s3-sync-container
    volumeMounts:
    - mountPath: {{index .Options "dataPath"}}
      name: dataset-root
    env:
{{ if eq .KVCOp "add" }}
    - name: AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: {{index .Options "awsCredentialsSecretName"}}
          key: awsAccessKeyID
    - name: AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: {{index .Options "awsCredentialsSecretName"}}
          key: awsSecretAccessKey
    - name: AWS_ENDPOINT_URL
      value: {{.EndpointURL}}
    - name: S3_URL
      value: {{.SourceURL}}
    - name: S3_VERSION
      value: {{.S3Version}}
    - name: BUCKET_NAME
      value: {{.BucketName}}
    - name: BUCKET_PATH
      value: {{.BucketPath}}
    - name: RECURSIVE_OPTION
      value: {{.RecursiveOption}}
{{ end  }}
    - name: DATA_PATH
      value: {{ index .KVCOptions "path" }}
  restartPolicy: "Never"
